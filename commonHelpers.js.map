{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["// Описаний в документації\nimport flatpickr from \"flatpickr\";\n// Додатковий імпорт стилів\nimport \"flatpickr/dist/flatpickr.min.css\";\n\n// Описаний у документації\nimport iziToast from \"izitoast\";\n// Додатковий імпорт стилів\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n\n\n// Get element date input, start btn, data: days, hours, min, sec\nconst imputDatePickerRef = document.querySelector('#datetime-picker');\nconsole.log(imputDatePickerRef);\nconst btnStartRef =  document.querySelector('[data-start]');\nconst daysRef =  document.querySelector('[data-days]');\nconst hoursRef =  document.querySelector('[data-hours]');\nconst minutesRef =  document.querySelector('[data-minutes]');\nconst secondsRef =  document.querySelector('[data-seconds]');\n\n// Set initial value\nlet timeDifference = 0;\nlet timerId = null;\nlet formatDate = null;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    console.log(selectedDates[0]);\n    currentDifferenceDate(selectedDates[0]);\n  },\n};\n\nbtnStartRef.setAttribute('disabled', true);\n\n// Initial flatpickr\nflatpickr(imputDatePickerRef, options);\n\n// Set click event listener on button start\nbtnStartRef.addEventListener('click', onBtnStart);\n// Reset timer on btn\nwindow.addEventListener('keydown', e => {\n  if (e.code === 'Escape' && timerId) {\n    clearInterval(timerId);\n\n    imputDatePickerRef.removeAttribute('disabled');\n    btnStartRef.setAttribute('disabled', true);\n\n    secondsRef.textContent = '00';\n    minutesRef.textContent = '00';\n    hoursRef.textContent = '00';\n    daysRef.textContent = '00';\n  }\n});\n\n// Start timer\nfunction onBtnStart() {\n  timerId = setInterval(startTimer, 1000);\n}\n\n//date checking and rendering of date difference\nfunction currentDifferenceDate(selectedDates) {\n  const currentDate = Date.now();\n\n  if (selectedDates < currentDate) {\n    btnStartRef.setAttribute('disabled', true);\n    return iziToast.show({\n      title: 'Error',\n      message: 'Illegal operation',\n      color: 'red',\n      closeOnClick: true,\n      icon: '/src/img/bi_x-octagon.svg',\n      iconColor: '#FAFAFB',\n      position: 'topCenter'\n});\n  }\n\n  timeDifference = selectedDates.getTime() - currentDate;\n  formatDate = convertMs(timeDifference);\n\n  renderDate(formatDate);\n  btnStartRef.removeAttribute('disabled');\n}\n\n//Timer\nfunction startTimer() {\n  btnStartRef.setAttribute('disabled', true);\n  imputDatePickerRef.setAttribute('disabled', true);\n\n  timeDifference -= 1000;\n\n  if (secondsRef.textContent <= 0 && minutesRef.textContent <= 0) {\n    iziToast.show({\n      message: 'Time end',\n      color: 'green',\n      closeOnClick: true,\n      closeOnEscape: true,\n      position: 'center'\n    });\n    clearInterval(timerId);\n  } else {\n    formatDate = convertMs(timeDifference);\n    renderDate(formatDate);\n  }\n}\n\n\n// Rendering date\nfunction renderDate(formatDate) {\n  daysRef.textContent = formatDate.days;\n  hoursRef.textContent = formatDate.hours;\n  minutesRef.textContent = formatDate.minutes;\n  secondsRef.textContent = formatDate.seconds;\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\n// console.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\n// console.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\n// console.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}\n"],"names":["imputDatePickerRef","btnStartRef","daysRef","hoursRef","minutesRef","secondsRef","timeDifference","timerId","formatDate","options","selectedDates","currentDifferenceDate","flatpickr","onBtnStart","e","startTimer","currentDate","iziToast","convertMs","renderDate","ms","days","hours","minutes","seconds"],"mappings":"2GAaA,MAAMA,EAAqB,SAAS,cAAc,kBAAkB,EACpE,QAAQ,IAAIA,CAAkB,EAC9B,MAAMC,EAAe,SAAS,cAAc,cAAc,EACpDC,EAAW,SAAS,cAAc,aAAa,EAC/CC,EAAY,SAAS,cAAc,cAAc,EACjDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAc,SAAS,cAAc,gBAAgB,EAG3D,IAAIC,EAAiB,EACjBC,EAAU,KACVC,EAAa,KAEjB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,QAAQ,IAAIA,EAAc,CAAC,CAAC,EAC5BC,EAAsBD,EAAc,CAAC,CAAC,CACvC,CACH,EAEAT,EAAY,aAAa,WAAY,EAAI,EAGzCW,EAAUZ,EAAoBS,CAAO,EAGrCR,EAAY,iBAAiB,QAASY,CAAU,EAEhD,OAAO,iBAAiB,UAAWC,GAAK,CAClCA,EAAE,OAAS,UAAYP,IACzB,cAAcA,CAAO,EAErBP,EAAmB,gBAAgB,UAAU,EAC7CC,EAAY,aAAa,WAAY,EAAI,EAEzCI,EAAW,YAAc,KACzBD,EAAW,YAAc,KACzBD,EAAS,YAAc,KACvBD,EAAQ,YAAc,KAE1B,CAAC,EAGD,SAASW,GAAa,CACpBN,EAAU,YAAYQ,EAAY,GAAI,CACxC,CAGA,SAASJ,EAAsBD,EAAe,CAC5C,MAAMM,EAAc,KAAK,MAEzB,GAAIN,EAAgBM,EAClB,OAAAf,EAAY,aAAa,WAAY,EAAI,EAClCgB,EAAS,KAAK,CACnB,MAAO,QACP,QAAS,oBACT,MAAO,MACP,aAAc,GACd,KAAM,4BACN,UAAW,UACX,SAAU,WAChB,CAAC,EAGCX,EAAiBI,EAAc,QAAS,EAAGM,EAC3CR,EAAaU,EAAUZ,CAAc,EAErCa,EAAWX,CAAU,EACrBP,EAAY,gBAAgB,UAAU,CACxC,CAGA,SAASc,GAAa,CACpBd,EAAY,aAAa,WAAY,EAAI,EACzCD,EAAmB,aAAa,WAAY,EAAI,EAEhDM,GAAkB,IAEdD,EAAW,aAAe,GAAKD,EAAW,aAAe,GAC3Da,EAAS,KAAK,CACZ,QAAS,WACT,MAAO,QACP,aAAc,GACd,cAAe,GACf,SAAU,QAChB,CAAK,EACD,cAAcV,CAAO,IAErBC,EAAaU,EAAUZ,CAAc,EACrCa,EAAWX,CAAU,EAEzB,CAIA,SAASW,EAAWX,EAAY,CAC9BN,EAAQ,YAAcM,EAAW,KACjCL,EAAS,YAAcK,EAAW,MAClCJ,EAAW,YAAcI,EAAW,QACpCH,EAAW,YAAcG,EAAW,OACtC,CAEA,SAASU,EAAUE,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}